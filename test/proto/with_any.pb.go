// Code generated by protoc-gen-go. DO NOT EDIT.
// source: with_any.proto

package test_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WithAny struct {
	A  *google_protobuf.Any   `protobuf:"bytes,1,opt,name=a" json:"a,omitempty"`
	Ra []*google_protobuf.Any `protobuf:"bytes,2,rep,name=ra" json:"ra,omitempty"`
}

func (m *WithAny) Reset()                    { *m = WithAny{} }
func (m *WithAny) String() string            { return proto.CompactTextString(m) }
func (*WithAny) ProtoMessage()               {}
func (*WithAny) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *WithAny) GetA() *google_protobuf.Any {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *WithAny) GetRa() []*google_protobuf.Any {
	if m != nil {
		return m.Ra
	}
	return nil
}

type TestMessage struct {
	Num int64 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TestMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*WithAny)(nil), "test_proto.WithAny")
	proto.RegisterType((*TestMessage)(nil), "test_proto.TestMessage")
}

func init() { proto.RegisterFile("with_any.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcf, 0x2c, 0xc9,
	0x88, 0x4f, 0xcc, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0x89, 0x07, 0xb3, 0xa5, 0x24, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xbc, 0xa4, 0xd2,
	0x34, 0x7d, 0xb8, 0x32, 0xa5, 0x60, 0x2e, 0xf6, 0xf0, 0xcc, 0x92, 0x0c, 0xc7, 0xbc, 0x4a, 0x21,
	0x25, 0x2e, 0xc6, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x11, 0x3d, 0x88, 0x0e, 0x3d,
	0x98, 0x0e, 0x3d, 0xc7, 0xbc, 0xca, 0x20, 0xc6, 0x44, 0x21, 0x15, 0x2e, 0xa6, 0xa2, 0x44, 0x09,
	0x26, 0x05, 0x66, 0x9c, 0x8a, 0x98, 0x8a, 0x12, 0x95, 0xe4, 0xb9, 0xb8, 0x43, 0x52, 0x8b, 0x4b,
	0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x04, 0xb8, 0x98, 0xf3, 0x4a, 0x73, 0xc1, 0x46,
	0x33, 0x07, 0x81, 0x98, 0x49, 0x6c, 0x60, 0x2d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d,
	0xb2, 0x0f, 0x41, 0xb5, 0x00, 0x00, 0x00,
}
